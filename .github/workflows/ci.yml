name: Build + Deploy

on:
  push:
    branches: [master]
    tags: ["v*.*.*"]
  pull_request:
    branches: [master]
  release:
    types:
      - published

env:
  PROJECT_NAME: brotli
  PACKAGE_DIR: src/brotli
  CIBW_TEST_COMMAND: python -m unittest discover -v -s {package}/python/ -p "*_test.py"

jobs:

  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PACKAGE_DIR }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install --upgrade setuptools twine
    - name: Build sdist
      run: python setup.py sdist
    - name: Check metadata
      run: twine check dist/*.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        path: ${{ env.PACKAGE_DIR }}/dist/*.tar.gz
        name: sdist

  build_wheels:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        # macos-13 runners are still x86_64, macos-14 (latest) are arm64; we want to build
        # the x86_64 wheel on/for x86_64 macs
        os: [macos-13, windows-latest]
        arch: [auto64]
        build: ["cp{38,39,310,311,312,313,314}-*"]
        # temporarily disable building wheels for PyPy until this gets fixed:
        # https://github.com/google/brotli-wheels/issues/19
        # skip free-threaded Python builds until compatibility is verified
        skip: ["pp* cp*t-*"]
        include:
          # manylinux2014 for python 3.8+ (broader compatibility)
          - os: ubuntu-latest
            arch: auto
            type: manylinux2014
            build: "cp{38,39,310,311,312,313,314}-*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
            CIBW_MANYLINUX_I686_IMAGE: manylinux2014

          - os: macos-latest
            arch: universal2
            build: "cp{38,39,310,311,312,313,314}-*"
            skip: "pp* cp*t-*"

          - os: windows-latest
            arch: auto32
            build: "cp{38,39,310,311,312,313,314}-*"
            skip: "pp* cp*t-*"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_SKIP: ${{ matrix.skip }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.type }}

  build_arch_wheels:
    name: py${{ matrix.python }} on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # aarch64 uses qemu so it's slow, build each py version in parallel jobs
        python: [38, 39, 310, 311, 312, 313, 314]
        arch: [aarch64, ppc64le]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: docker/setup-qemu-action@v3
      with:
        platforms: all
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: cp${{ matrix.python }}-*
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-${{ matrix.arch }}-${{ matrix.python }}

  build_wheels_py36_37:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }} (py36-37)
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest]
        arch: [auto64]
        build: ["cp{36,37}-*"]
        skip: ["pp*"]
        include:
          # manylinux2010 for python 3.6-3.7 (these versions not in manylinux2014)
          - os: ubuntu-latest
            arch: auto
            type: manylinux2010
            build: "cp{36,37}-*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
            CIBW_MANYLINUX_I686_IMAGE: manylinux2010

          - os: windows-latest
            arch: auto32
            build: "cp{36,37}-*"
            skip: "pp*"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install cibuildwheel==2.23.3
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_SKIP: ${{ matrix.skip }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py36-37-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.type }}

  build_arch_wheels_py36_37:
    name: py${{ matrix.python }} on ${{ matrix.arch }} (py36-37)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [36, 37]
        arch: [aarch64, ppc64le]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: docker/setup-qemu-action@v3
      with:
        platforms: all
    - name: Install dependencies
      run: pip install cibuildwheel==2.23.3
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: cp${{ matrix.python }}-*
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py36-37-${{ matrix.arch }}-${{ matrix.python }}

  build_wheels_py27:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }} (py27)
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 and i686
          - os: ubuntu-latest
            arch: auto
            build: "cp27-*"
            type: manylinux1
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
            CIBW_MANYLINUX_I686_IMAGE: manylinux1

          # macOS x86_64
          - os: macos-13
            arch: auto64
            build: "cp27-*"
            type: macos
            CIBW_MANYLINUX_X86_64_IMAGE: ""
            CIBW_MANYLINUX_I686_IMAGE: ""

          # Windows 64-bit
          - os: windows-latest
            arch: auto64
            build: "cp27-*"
            type: windows
            vcvars_arch: amd64
            CIBW_MANYLINUX_X86_64_IMAGE: ""
            CIBW_MANYLINUX_I686_IMAGE: ""

          # Windows 32-bit
          - os: windows-latest
            arch: auto32
            build: "cp27-*"
            type: windows
            vcvars_arch: x86
            CIBW_MANYLINUX_X86_64_IMAGE: ""
            CIBW_MANYLINUX_I686_IMAGE: ""
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    # Install Visual C++ for Python 2.7 from Web Archive
    - name: Install Visual C++ for Python 2.7 on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $url = "https://web.archive.org/web/20210106040224if_/https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi"
        $installer = "$env:TEMP\VCForPython27.msi"
        Write-Host "Downloading VCForPython27.msi..."
        Invoke-WebRequest -Uri $url -OutFile $installer -UserAgent "Mozilla/5.0"
        Write-Host "Installing VCForPython27..."
        $process = Start-Process msiexec.exe -ArgumentList "/i `"$installer`" /quiet /norestart" -Wait -PassThru
        if ($process.ExitCode -ne 0) {
            Write-Error "Installation failed with exit code: $($process.ExitCode)"
            exit $process.ExitCode
        }
        Write-Host "VCForPython27 installed successfully"

    - name: Verify VC for Python 2.7 installation
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Searching for vcvarsall.bat in known locations..."
        $paths = @(
            "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat",
            "C:\Program Files\Common Files\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat",
            "$env:LOCALAPPDATA\Programs\Common\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat"
        )
        foreach ($path in $paths) {
            if (Test-Path $path) {
                Write-Host "Found: $path"
            }
        }
        Write-Host "`nSearching in Program Files (x86)\Common Files\Microsoft..."
        Get-ChildItem -Path "C:\Program Files (x86)\Common Files\Microsoft" -Recurse -Filter "vcvarsall.bat" -ErrorAction SilentlyContinue | Select-Object FullName

    - name: Install dependencies
      run: pip install cibuildwheel==1.12.0

    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
        # Enable C99 for Python 2.7 (brotli requires it)
        CIBW_ENVIRONMENT: "CFLAGS='-std=c99'"
        # Call vcvarsall.bat and install build requirements before building (Windows only)
        CIBW_BEFORE_BUILD_WINDOWS: call "%LOCALAPPDATA%\Programs\Common\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat" ${{ matrix.vcvars_arch || 'amd64' }} && pip install "setuptools<45" "wheel<0.38"
        # Disable isolated builds and set distutils flags for Windows Python 2.7 compilation
        CIBW_ENVIRONMENT_WINDOWS: "DISTUTILS_USE_SDK=1 MSSdk=1 PIP_NO_BUILD_ISOLATION=1"
        # Also need these at top-level for cibuildwheel to detect Python 2.7 on Windows
        DISTUTILS_USE_SDK: ${{ runner.os == 'Windows' && '1' || '' }}
        MSSdk: ${{ runner.os == 'Windows' && '1' || '' }}

    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py27-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.type }}

  deploy:
    name: Upload if release
    needs: [build_wheels, build_arch_wheels, build_wheels_py36_37, build_arch_wheels_py36_37, build_wheels_py27, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}
        skip_existing: true
