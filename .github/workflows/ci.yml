name: Build + Deploy

on:
  push:
    branches: [master]
    tags: ["v*.*.*"]
  pull_request:
    branches: [master]
  release:
    types:
      - published

env:
  PROJECT_NAME: brotli
  PACKAGE_DIR: src/brotli
  CIBW_TEST_COMMAND: python -m unittest discover -v -s {package}/python/ -p "*_test.py"

jobs:

  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PACKAGE_DIR }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install --upgrade setuptools twine
    - name: Build sdist
      run: python setup.py sdist
    - name: Check metadata
      run: twine check dist/*.tar.gz
    - uses: actions/upload-artifact@v4
      with:
        path: ${{ env.PACKAGE_DIR }}/dist/*.tar.gz
        name: sdist

  build_wheels:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        # macos-13 runners are still x86_64, macos-14 (latest) are arm64; we want to build
        # the x86_64 wheel on/for x86_64 macs
        os: [macos-13, windows-latest]
        arch: [auto64]
        build: ["cp{38,39,310,311,312,313,314}-*"]
        # temporarily disable building wheels for PyPy until this gets fixed:
        # https://github.com/google/brotli-wheels/issues/19
        # skip free-threaded Python builds until compatibility is verified
        skip: ["pp* cp*t-*"]
        include:
          # manylinux2014 for python 3.8+ (broader compatibility)
          - os: ubuntu-latest
            arch: auto
            type: manylinux2014
            build: "cp{38,39,310,311,312,313,314}-*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
            CIBW_MANYLINUX_I686_IMAGE: manylinux2014

          - os: macos-latest
            arch: universal2
            build: "cp{38,39,310,311,312,313,314}-*"
            skip: "pp* cp*t-*"

          - os: windows-latest
            arch: auto32
            build: "cp{38,39,310,311,312,313,314}-*"
            skip: "pp* cp*t-*"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_SKIP: ${{ matrix.skip }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.type }}

  build_arch_wheels:
    name: py${{ matrix.python }} on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # aarch64 uses qemu so it's slow, build each py version in parallel jobs
        python: [38, 39, 310, 311, 312, 313, 314]
        arch: [aarch64, ppc64le]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: docker/setup-qemu-action@v3
      with:
        platforms: all
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: cp${{ matrix.python }}-*
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-${{ matrix.arch }}-${{ matrix.python }}

  build_wheels_py36_37:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }} (py36-37)
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest]
        arch: [auto64]
        build: ["cp{36,37}-*"]
        skip: ["pp*"]
        include:
          # manylinux2010 for python 3.6-3.7 (these versions not in manylinux2014)
          - os: ubuntu-latest
            arch: auto
            type: manylinux2010
            build: "cp{36,37}-*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
            CIBW_MANYLINUX_I686_IMAGE: manylinux2010

          - os: windows-latest
            arch: auto32
            build: "cp{36,37}-*"
            skip: "pp*"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install cibuildwheel==2.23.3
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_SKIP: ${{ matrix.skip }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py36-37-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.type }}

  build_arch_wheels_py36_37:
    name: py${{ matrix.python }} on ${{ matrix.arch }} (py36-37)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [36, 37]
        arch: [aarch64, ppc64le]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: docker/setup-qemu-action@v3
      with:
        platforms: all
    - name: Install dependencies
      run: pip install cibuildwheel==2.23.3
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: cp${{ matrix.python }}-*
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py36-37-${{ matrix.arch }}-${{ matrix.python }}

  build_wheels_py27:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }} (py27)
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 and i686
          - os: ubuntu-latest
            arch: auto
            build: "cp27-*"
            type: manylinux1
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
            CIBW_MANYLINUX_I686_IMAGE: manylinux1

          # macOS x86_64
          - os: macos-13
            arch: auto64
            build: "cp27-*"
            type: macos
            CIBW_MANYLINUX_X86_64_IMAGE: ""
            CIBW_MANYLINUX_I686_IMAGE: ""
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: pip install cibuildwheel==1.12.0

    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse "${PACKAGE_DIR}"
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
        # Enable C99 for Python 2.7 (brotli requires it)
        CIBW_ENVIRONMENT: "CFLAGS='-std=c99'"

    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py27-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.type }}

  build_wheels_py27_windows:
    name: Python 2.7 on Windows ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            python_arch: amd64
          - arch: x86
            python_arch: x86
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python 3.x (for running scripts)
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install Python 2.7 via Chocolatey
      shell: pwsh
      run: |
        $pythonArch = "${{ matrix.python_arch }}"
        $forceX86 = if ($pythonArch -eq "x86") { "--x86" } else { "" }
        Write-Host "Installing Python 2.7 for $pythonArch..."
        choco install python2 --version=2.7.18 -y $forceX86
        # Python 2.7 installs to C:\Python27 (or C:\Python27-x86 for x86 on x64 host)
        $pythonPath = if ($pythonArch -eq "x86" -and (Test-Path "C:\Python27-x86")) { "C:\Python27-x86" } else { "C:\Python27" }
        Write-Host "Python installed to: $pythonPath"
        # Prepend to PATH so 'python' command uses Python 2.7
        echo "$pythonPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "$pythonPath\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify Python 2.7 installation
      shell: cmd
      run: |
        python --version
        python -c "import struct; print(struct.calcsize('P') * 8)"
        python -c "import sys; print('Python executable: ' + sys.executable)"
        python -c "import sys; print('Python prefix: ' + sys.prefix)"
        where python.exe
        where python27.dll

    - name: Install MinGW
      shell: pwsh
      run: |
        $pythonArch = "${{ matrix.python_arch }}"
        if ($pythonArch -eq "x86") {
            Write-Host "Installing MinGW-w64 32-bit..."
            choco install mingw --version=11.2.0.07112021 --x86 -y --force
        } else {
            Write-Host "Installing MinGW-w64 64-bit..."
            choco install mingw --version=11.2.0.07112021 -y --force
        }

    - name: Create MinGW-compatible Python import library
      shell: cmd
      run: |
        cd C:\Python27\libs
        echo Before cleanup:
        dir *.lib *.a
        echo.
        echo Removing MSVC import libraries...
        if exist python27.lib ren python27.lib python27.lib.bak
        if exist libmsvcr90.a del libmsvcr90.a
        if exist msvcr90.lib ren msvcr90.lib msvcr90.lib.bak
        echo.
        echo Creating MinGW import library...
        C:\ProgramData\chocolatey\bin\gendef.exe C:\Windows\System32\python27.dll
        C:\ProgramData\chocolatey\bin\dlltool.exe --dllname python27.dll --def python27.def --output-lib libpython27.a
        echo.
        echo Checking for required Python symbols in libpython27.a:
        nm libpython27.a | findstr "Py_InitModule4" || echo ERROR: Py_InitModule4 not found!
        echo.
        echo After:
        dir *.lib *.a

    - name: Configure distutils to use MinGW
      shell: pwsh
      run: |
        # Create distutils.cfg to tell distutils to use mingw32 compiler
        $pythonLib = "C:\Python27\Lib"
        $distutilsCfg = "$pythonLib\distutils\distutils.cfg"
        @"
        [build]
        compiler=mingw32
        "@ | Out-File -FilePath $distutilsCfg -Encoding ascii
        Write-Host "Created $distutilsCfg"

    - name: Build wheel
      shell: cmd
      run: |
        cd ${{ env.PACKAGE_DIR }}
        python -m pip install --upgrade "pip<21"
        python -m pip install "setuptools<45" "wheel<0.38"
        python -m pip wheel . --no-deps --no-build-isolation -w ..\..\wheelhouse
      env:
        CFLAGS: -static-libgcc -static-libstdc++

    - name: Test wheel
      shell: cmd
      run: |
        python -m pip install wheelhouse\*.whl
        python -m unittest discover -v -s ${{ env.PACKAGE_DIR }}\python\ -p "*_test.py"

    - uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: wheels-py27-windows-${{ matrix.arch }}

  deploy:
    name: Upload if release
    needs: [build_wheels, build_arch_wheels, build_wheels_py36_37, build_arch_wheels_py36_37, build_wheels_py27, build_wheels_py27_windows, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}
        skip_existing: true
