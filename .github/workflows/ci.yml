name: Build + Deploy

on:
  push:
    branches: [master]
    tags: ["v*.*.*"]
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      PROJECT_NAME: brotli
      PACKAGE_DIR: "src/${PROJECT_NAME}"
      OUTPUT_DIR: wheelhouse
      CIBW_TEST_COMMAND: python -m unittest discover -v -s {package}/python/ -p "*_test.py"
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
      CIBW_MANYLINUX_I686_IMAGE: manylinux1
      CIBW_ARCHS_MACOS: x86_64 universal2 arm64
      CIBW_ARCHS_LINUX: auto aarch64 ppc64le s390x

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --package_dir "${PACKAGE_DIR}" --output-dir "${OUTPUT_DIR}"
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-wheels
        path: ${{ env.OUTPUT_DIR }}/*.whl

  deploy:
    # only run if the commit is tagged...
    if: startsWith(github.ref, 'refs/tags/v')
    # ... and all build jobs completed successfully
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel twine
    - name: Download artifacts from build jobs
      uses: actions/download-artifact@v2
      with:
        path: ${{ env.OUTPUT_DIR }}/
    - name: Move wheels to dist/ directory
      run: |
        ls "${OUTPUT_DIR}"/*
        mkdir -p dist/
        mv "${OUTPUT_DIR}/${PROJECT_NAME}"-wheels/*.whl dist/
    - name: Extract release notes from annotated tag message
      id: release_notes
      env:
        # e.g. v0.1.0a1, v1.2.0b2 or v2.3.0rc3, but not v1.0.0
        PRERELEASE_TAG_PATTERN: "v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+([ab]|rc)[[:digit:]]+"
      run: |
        # GH checkout action doesn't preserve tag annotations, we must fetch them
        # https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        # strip leading 'refs/tags/' to get the tag name
        TAG_NAME="${GITHUB_REF##*/}"
        # Dump tag message to temporary .md file (excluding the PGP signature at the bottom)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME | sed -n '/-----BEGIN PGP SIGNATURE-----/q;p')
        echo "$TAG_MESSAGE" > "${{ runner.temp }}/release_notes.md"
        # if the tag has a pre-release suffix mark the Github Release accordingly
        if egrep -q "$PRERELEASE_TAG_PATTERN" <<< "$TAG_NAME"; then
          echo "Tag contains a pre-release suffix"
          echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
        else
          echo "Tag does not contain pre-release suffix"
          echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
        fi
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "${{ runner.temp }}/release_notes.md"
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        if [ "$IS_PRERELEASE" == true ]; then
          echo "DEBUG: This is a pre-release"
        else
          echo "DEBUG: This is a final release"
        fi
        python setup.py sdist
        twine upload dist/*
